#!/usr/bin/env node

const Path = require('node:path')
const { statSync } = require('node:fs')
const { parseArgs } = require('node:util')

const { Gubu, Fault, One } = require('gubu')

const Pkg = require('../package.json')

const { SdkGen } = require('../dist/sdkgen.js')


let CONSOLE = console

run()


async function run() {
  try {
    let options = resolveOptions()

    if (options.version) {
      version()
    }

    if (options.help) {
      help()
    }

    if (options.version || options.help) {
      exit()
    }

    options = validateOptions(options)

    await operate(options)
  }
  catch (err) {
    handleError(err)
  }
}


function exit(err) {
  let code = 0
  if (err) {
    code = 1
  }
  process.exit(code)
}


async function operate(options) {
  console.log('CMD OPTS', options)
  const sdkgen = new SdkGen({
    debug: options.debug,
    dryrun: options.dryrun,
  })

  await sdkgen.action(options.args)
}



function resolveOptions() {

  const args = parseArgs({
    allowPositionals: true,
    options: {
      debug: {
        type: 'string',
        short: 'g',
        default: 'info'
      },

      help: {
        type: 'boolean',
        short: 'h',
      },

      version: {
        type: 'boolean',
        short: 'v',
      },

      dryrun: {
        type: 'boolean',
        short: 'y',
      },

    }
  })

  const options = {
    debug: args.values.debug,
    help: !!args.values.help,
    version: !!args.values.version,
    dryrun: !!args.values.dryrun,
    args: args.positionals,
  }

  return options
}


function validateOptions(rawOptions) {
  const optShape = Gubu({
    debug: One(String, Boolean),
    help: Boolean,
    version: Boolean,
    dryrun: Boolean,
    args: [String]
  })

  const err = []
  const options = optShape(rawOptions, { err })

  if (err[0]) {
    throw new Error(err[0].text)
  }

  return options
}


async function handleError(err) {
  const errdesc = 'SdkGenError' === err.name ? err.message : err
  CONSOLE.log('Voxgig SDK Generation Error:', errdesc)
  exit(err)
}


function version() {
  CONSOLE.log(Pkg.version)
}


function help() {
  const s = 'TODO'
  CONSOLE.log(s)
}


